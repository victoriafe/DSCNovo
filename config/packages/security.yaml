security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
            logout:
                path: app_logout
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 86400
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_CHEF: ROLE_USER
        ROLE_WAITER: ROLE_CHEF
        ROLE_ADMIN: ROLE_WAITER
        
    access_control:
        - { path: ^/menu, roles: ROLE_USER }

        # Acesso para os Gar√ßons (ROLE_WAITER) e Administradores (ROLE_ADMIN)
        - { path: ^/order, roles: ROLE_CHEF }
        - { path: ^/orderfinish, roles: ROLE_WAITER }
        - { path: ^/order/new, roles: ROLE_WAITER }
        - { path: ^/order/\d+, roles: ROLE_CHEF }
        - { path: ^/order/\d+/edit, roles: ROLE_WAITER }
        - { path: ^/order/\d+, methods: POST, roles: ROLE_WAITER }

        - { path: ^/table_order, roles: ROLE_WAITER }
        - { path: ^/table_order/new, roles: ROLE_WAITER }
        - { path: ^/table_order/finish, roles: ROLE_WAITER }
        - { path: ^/table_order/\d+, roles: ROLE_WAITER }
        - { path: ^/table_order/\d+/edit, roles: ROLE_WAITER }
        - { path: ^/table_order/\d+, methods: POST, roles: ROLE_WAITER }

        # Acesso para os Administradores (ROLE_ADMIN)
        - { path: ^/product, roles: ROLE_ADMIN }
        - { path: ^/product/new, roles: ROLE_ADMIN }
        - { path: ^/product/\d+, roles: ROLE_ADMIN }
        - { path: ^/product/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/product/\d+, methods: POST, roles: ROLE_ADMIN }

        - { path: ^/stock, roles: ROLE_ADMIN }
        - { path: ^/stock/new, roles: ROLE_ADMIN }
        - { path: ^/stock/\d+, roles: ROLE_ADMIN }
        - { path: ^/stock/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/stock/\d+, methods: POST, roles: ROLE_ADMIN }

        - { path: ^/table, roles: ROLE_ADMIN }
        - { path: ^/table/new, roles: ROLE_ADMIN }
        - { path: ^/table/\d+, roles: ROLE_ADMIN }
        - { path: ^/table/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/table/\d+, methods: POST, roles: ROLE_ADMIN }
            
        - { path: ^/user, roles: ROLE_ADMIN }
        - { path: ^/user/new, roles: ROLE_ADMIN }
        - { path: ^/user/\d+, roles: ROLE_ADMIN }
        - { path: ^/user/\d+/edit, roles: ROLE_ADMIN }
        - { path: ^/user/\d+, methods: POST, roles: ROLE_ADMIN }

        - { path: ^/report, roles: ROLE_ADMIN }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
